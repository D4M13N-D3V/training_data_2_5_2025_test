{
  "timestamp": "2025-02-05T23:00:52.072674",
  "content": "Search Free Trial Get Demo Example Analysis of Multi-Component Malware July 12, 2022 Recently, we have received an increase in the number of malicious email samples with password-protected attachments. The recent waves of attacks with Emotet use a similar approach. In this blog we describe our analysis of another set of samples that used file archives e.g. zip file secured with passwords. Figures 1.1 and 1.2 Emails with initial malware component, an HTML attachment Once the HTML file is opened, it will drop a file as if that file was downloaded by the user. The HTML page also displays the password for the dropped file. Figure 2. the HTML attachment will drop a password-protected archive file named download.zip Extracted File One of the samples we analyzed contained a file named IMG0457600xls.exe. The authors tried to disguise the executable file as a Microsoft Office file by using XLS as part as its filename and using a WORD icon. This error by the perpetrators is a red flag for users. Figure 3. PE executable with a WORD icon and double extension xls.exe A quick static analysis of the Portable Executable file reveals that it is a .NET executable so we could use dnSpy to analyze its behavior. Reviewing its code, one of its methods contains a URL to a file named IMG0457600xls.png. The PNG file extension suggests that it might be an image file but its not. We downloaded the file so we could reverse engineer the code. Figure 4. Excerpt code of the download behavior Fileless Payloads To identify what the PNG file truly is, we created a simple tool to reverse its contents. After reversing the content, the downloaded file is another Windows PE object, a DLL file to be exact. This file type is commonly known as a reverse EXE. The DLL payload will be loaded in memory using the AppDomain.CurrentDomain.Load method. It will then search if it has a member named Dnypiempvyffgdjjm. If found, it will invoke this member via the InvokeMember method that will execute the main code of the payload in memory. Figure 5. Code excerpt of the loop searching for the member Figure 6. EnableServer method which will be called once the member is found Since we had a copy of the downloaded DLL payload reverse EXE with PNG extension, we continued our static analysis on this component before debugging the initial Windows PE Executable file IMG0457600xls.exe. Loading it in dnSpy, we could see valuable information about it. The DLL filename was Svcwmhdn.dll. It was also obfuscated using Smart Assembly. We used the de4dot tool to de-obfuscate and unpack the DLL component to make it easier to analyze. Once it was de-obfuscated and unpacked, it gave us a clue that part of the payload was also obfuscated by FodyCostura. Figure 7. File information of Svcwmhdn.dll Figure 8. FodyCostura embedded resources Malware in action Layers of Obfuscation After getting clues with our static analysis, we debugged the malware components. We begin our analysis from the point when the DLL is loaded into memory. At the start of its execution, it will decompress two resources before starting the actual malicious behavior. It uses the AES algorithm to decrypt both resources. It will first decrypt the resource tagged as 0235d35d-030c-4d50-b46a-055fbb9ab683. This resource contains the strings the malware uses. Next, it will decrypt 8569c651-a5ff-4d2e-8dd8-aaa0f6904365. It is another Windows PE component, which will be loaded in memory. If the decryption fails, the DLL will try to drop a copy of the component and load it into memory via the LoadFile method. Figure 9. The 2 encrypted resources Figures 10.1 and 10.2. Decryption method with the AES key and IV, and aesCryptoServiceProvider Figure 11. Excerpt code of the decryption of one of the resources Checking the information if we try to force it to drop the content, it is another executable component. It contains resources that were compressed using FodyCostura as seen in our static analysis in Figure 8. It has several resources to decompress. One of them is the Protobuf-net module. These resources were also decrypted and then decompressed. Take note of the resource named  _._.resources 141363 bytes, Embedded, Public which has a child resource Jhufjcjrbgyyuktdl as this will be accessed later. Figure 12. Decompression code for FodyCostura embedded resources After the layers of obfuscation and related initializations, we will now move at the start of the malware. The method Dnypiempvyffgdjjm is where the main malware routine is located. At the start, it will initialize its settings. By looking at Figure 14, we can see the list of the possible actions it can take. Most of the settings were set to false. And by just analyzing it, we can assume that this malware only supports 32bit Operating Systems and will inject a payload in MSBuild. Figure 13. Start of the main routine Figure 14. Settings of the malware Evasion Aside from the 23 second delay set to evade sandboxes, it also checks if the username of the machine is equal to JohnDoe or the computer namehostname is equal to HAL9TH. If found true, it will terminate the execution. These strings are related to Windows Defender emulator. Figure 15 shows the code for checking the usernamecomputer name. Each string is obfuscated and will be fetched from the decrypted resource 0235d35d-030c-4d50-b46a-055fbb9ab683. It will compute for the offset of the string by XORing the input integer and then subtracting 0xA6. The first byte of the located offset is the string size followed by the encoded string. The encoded string is then decoded using B64 algorithm. This approach of retrieving the string is used throughout the malware. Figure 15. Excerpt code for the checking of username and computer namehostname Final Fileless Payload Based on the settings, we assumed that it will inject an executable payload in MSBUILD.exe. So before it can proceed with the injection, it will need to retrieve the necessary API. Figure 18 shows the code that will try to dynamically resolve the APIs. The approach to retrieve the string is the same as mentioned earlier. The difference is that the API encoded strings have an  character randomly inserted. It needs to remove the  character before proceeding to use the B64 algorithm to decode it. Take a look at the example in the chart below. First, it will get the corresponding DLL where it will import the API. In this example, it is kernel32. Then it will retrieve the API string. After decoding the string using the same approach decoding the DLL string, it will be equal to  UmVzdW1lVGhyZWFk. It will then remove the  char before proceeding to decoding the string using B64 again.The final output will be equal to the API string ResumeThread. It will dynamically resolve a few more APIs. These APIs will be used in its process injection routine. DLL API kernel32.dll ResumeThread kernel32.dll Wow64SetThreadContext kernel32.dll SetThreadContext kernel32.dll GetThreadContext kernel32.dll VirtualAllocEx kernel32.dll WriteProcessMemory ntdll.dll ZwUnmapViewOfSection kernel32.dll CreateProcessA kernel32.dll CloseHandle kernel32.dll ReadProcessMemory Table 17. List of APIs Figure 18. The first API to be dynamically resolved is ResumeThread, imported from kernel32.dll At this point, it just needs the payload it will inject to MSBuild.exe. It hides the payload in the resource named Jhufjcjrbgyyuktdl. The data is reversed and then unpacked using GZIP. The file is a copy of a Formbook malware. We detect this file as W32Formbook.F.gen!Eldorado. Figure 19. Start of the injection code. The fileless payload Svcwmhdn.dll was created using Purecrypter. It is advertised as a file protector and available for sale. And as seen in the GUI interface, these options were available in the settings in Figure 14. Figure 20. PureCrypter options GUI Indicators of Compromise IOCs SHA256 6f10c68357f93bf51a1c92317675a525c261da91e14ee496c577ca777acc36f3 Description email attachment Filename IMG045760.html Detection HTMLDropper.A 9629934a49df20bbe2c5a76b9d1cc2091005dfef0c4c08dae364e6d654713e46 Description initial payload Filename IMG0457600xls.exe Detection W32MSIL_Kryptik.GSO.gen!Eldorado dc419e1fb85ece7894a922bb02d96ec812220f731e91b52ab2bc8de44726ce83 Description reverse PE fileless payload Filename Svcwmhdn.dll Detection W32MSIL_Kryptik.HJL.gen!Eldorado 37ed1ba1aab413fbf59e196f9337f6295a1fbbf1540e76525b43725b1e0b012d Description final fileless payload Filename Jhufjcjrbgyyuktdl Detection W32Formbook.F.gen!Eldorado Try it for Free Instant Data Classification Cyren URL Category Chacker Prev How the War in Ukraine Has Influenced the Scammers Underground Email Hijacking Delivers Qakbot Malware Next Company Partners Resources Investor Relations Products Freeware Demo Solutions Contact Us Privacy Management Service by Data443",
  "analysis_type": "comprehensive",
  "analysis": "### Comprehensive Analysis of Security-Related Content\n\nThe provided content is a detailed technical analysis of a multi-component malware attack, focusing on how the malware operates, its various components, and the techniques used to evade detection. Below is a structured analysis based on the key areas of interest: security features, compliance certifications, user guidance, technical implementation details, data protection measures, and best practices.\n\n---\n\n### 1. **Key Security Features and Their Benefits to Users**\nThe content highlights the malicious actors' techniques, which indirectly underscores the importance of robust security solutions. Based on the analysis, the following key security features are critical for protecting users:\n\n- **Email Filtering and Sandboxing**: The attack begins with malicious email attachments, emphasizing the need for advanced email security solutions that can detect and sandbox suspicious attachments for analysis.\n- **Behavioral Analysis**: The malware's use of fileless payloads and in-memory execution highlights the importance of endpoint detection and response (EDR) solutions that monitor for unusual system behavior.\n- **Anti-Malware Solutions**: Traditional signature-based antivirus may fail to detect obfuscated or encrypted payloads, so next-gen antivirus with machine learning and heuristic analysis is essential.\n- **Network Traffic Monitoring**: The malware communicates with command-and-control (C2) servers, making network traffic analysis and anomaly detection critical for identifying malicious activity.\n- **User Education**: The initial infection vector is a phishing email, so user awareness training can prevent the attack from succeeding.\n\n**Benefits**: These features help prevent initial compromise, detect advanced threats, and minimize the impact of an attack.\n\n---\n\n### 2. **Compliance Certifications and Regulatory Adherence**\nWhile the content does not explicitly mention compliance certifications, the analysis highlights the importance of adhering to security best practices that align with frameworks like:\n\n- **NIST Cybersecurity Framework**: Emphasizes proactive threat detection, response, and recovery.\n- **GDPR and Data Protection Regulations**: The focus on data protection measures ensures compliance with privacy laws.\n- **ISO 27001**: Guidelines on email security, endpoint protection, and incident response align with this standard.\n\nOrganizations that implement these frameworks can better resist and respond to similar attacks.\n\n---\n\n### 3. **User-Focused Security Recommendations**\nTo protect againstthis type of attack, end users should follow these practical steps:\n\n- **Avoid Opening Suspicious Emails**: Do not open attachments or click links from unsolicited emails, especially those with password-protected archives.\n- **Enable Antivirus and EDR**: Ensure endpoint security solutions are up to date and configured to detect fileless malware.\n- **Use Strong Passwords**: Avoid using easily guessable passwords for archives or system accounts.\n- **Monitor System Behavior**: Be vigilant for unusual system activity, such as unexpected processes or performance issues.\n- **Apply Security Patches**: Regularly update software and operating systems to mitigate vulnerabilities.\n\n---\n\n### 4. **Technical Security Implementation Details**\nThe analysis reveals the following technical measures to mitigate such attacks:\n\n- **Static and Dynamic Analysis Tools**: Tools like `dnSpy` and `de4dot` can help security teams analyze suspicious files and reverse-engineer payloads.\n- **Encryption and Obfuscation Detection**: Solutions that detect encrypted or obfuscated files can help identify and block malicious payloads.\n- **Memory Protection**: Implementations that monitor for in-memory execution (e.g., AppDomain.CurrentDomain.Load) can detect fileless attacks.\n- **C2 Traffic Monitoring**: Network monitoring tools can identify and block communication with known malicious domains or unusual traffic patterns.\n\n---\n\n### 5. **Data Protection Measures**\nThe content highlights the importance of protecting sensitive data from exfiltration. The following measures are critical:\n\n- **Data Loss Prevention (DLP)**: Monitor for and block unauthorized data transfers.\n- **Encryption**: Use end-to-end encryption for sensitive data to prevent interception.\n- **Access Controls**: Restrict access to sensitive systems and data based on the principle of least privilege.\n- **Regular Backups**: Maintain encrypted backups to ensure data recovery in case of an attack.\n\n---\n\n### 6. **Best Practices for End Users**\nEnd users play a critical role in preventing such attacks. The following best practices are recommended:\n\n- **Verify Email Sources**: Always check the sender's email address and look for signs of spoofing.\n- **Report Suspicious Emails**: Forward suspicious emails to the IT or security team for analysis.\n- **Use Security Tools**: Enable features like email scanning, firewall protection, and browser security extensions.\n- **Stay Informed**: Regularly update knowledge about phishing tactics and malware techniques.\n- **Perform Regular Backups**: Ensure personal and critical data are backed up securely.\n\n---\n\n### Conclusion\nThe analysis provides a detailed insight into the tactics, techniques, and procedures (TTPs) of multi-component malware. Organizations and users must adopt a multi-layered security approach, combining advanced security tools, user education, and adherence to compliance frameworks to stay protected. By focusing on proactive threat detection, robust data protection, and user awareness, organizations can significantly reduce the risk of falling victim to such attacks.\n\nFor further assistance, recommend exploring the company's product documentation to identify specific security features, compliance certifications, and user-focused tools that align with the recommendations outlined above."
}