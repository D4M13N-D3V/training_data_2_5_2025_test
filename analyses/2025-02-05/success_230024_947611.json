{
  "timestamp": "2025-02-05T22:59:00.819563",
  "model": "deepseek/deepseek-r1-distill-llama-70b",
  "request": {
    "messages": [
      {
        "role": "system",
        "content": "You are a product security specialist explaining security features and capabilities.\n            Focus on clear, user-friendly explanations of technical security features."
      },
      {
        "role": "user",
        "content": "\n            Provide a detailed analysis of the product security features described in:\n            \n            Content to analyze:\n            Search Free Trial Get Demo Malicious Excel Add-in Variant Delivers Malware April 26, 2022 XLL is an Excel Add-in extension file that provides ways to use third-party tools and functions that are not available in Microsoft Excel. It is typically a Dynamic Link Library DLL file that can be loaded by Microsoft Excel provided the file uses the .xll extension. We have seen a surge of malware campaigns and attacks that were using XLL malware. Most of the malicious XLL files that we encountered utilized the open-source framework named Excel-DNA. Excel-DNA is a framework which allows you to create native XLL files using C or Visual Basic.NET. It also allows you to create user-defined functions, custom ribbons and many more. Palo Altos Unit 42 did a great job on the analysis of the first few malicious XLL files that utilized the Excel-DNA framework. Most Excel-DNA XLL malware that we have observed are simple downloaders or droppers, where the payloads are embedded within the XLL files themselves. The start of its malicious code is usually found in an overridden AutoOpen function from Excel-DNAs IExcelAddIn interface. Whenever an XLL file is opened by Excel, it invokes the xlAutoOpen function exported by XLL interface , which Excel-DNA passes to IExcelAddIn. AutoOpen. Typically, the final payload will either be downloaded or dropped onto the file system, before being executed. This typical malicious behavior is usually detected by endpoint security products. However, malware authors are always actively looking for ways to evade such detection. Recently, we detected improvements implemented in XLL malware to execute its payload without dropping the file to disk. Techniques like this are not totally new , however, this trick may have higher a chance of evading detection by endpoint security products. This post details this Excel-DNA XLL malware improvements in evading detection. Analysis Sample Sha256 2d9035fccfa410259c75bb54edc9c95c2d736e6bdf87832fc2062dcd89286b39 Our analysis begins with browsing through the resource section of the XLL file. Excel add-ins are usually compressed with LZMA algorithm and embedded in resource section. Looking at the resource named __MAIN__ from DNA directory, this contains the information of the modules to be loaded by Excel-DNA. We can see that a module named ENTER will be loaded. Lets extract this library and check the code. Figure 1. DNA Main XML Information The Enter Module Instead of using a customized Excel add-in library to automatically execute the malicious code via the xlAutoOpen function, this variant uses the Excel ribbon feature, which is supported in the Excel-DNA framework as an interface object. The inherited ExcelRibbon object is assumed to customize the applications ribbon interface. However, this module does not call the GetCustomUI function which loads the XML used to configure the appearance of the ribbon interface. Instead it takes advantage of this feature to execute a malicious function. The malicious function will be called in the librarys class constructor. Class constructor is a special member of a class that will be first executed whenever a new instance of that class is created. Figure 2. Class Constructor Looking at the handler function, first it will download some data from an obfuscated URL, which was hard-coded into the module. Its obfuscation is simple, each character was subtracted by a hard-coded key, in this case 2 integer value. Figure 3. Obfuscated URL As shown in Figure 3, we expect the file to be downloaded as an RTF document. Instead, it appears to be plaintext configuration data split into an array using  as the delimiter. Each element will be accessed through its index in the array. Figure 4 shows the actual split data and Table 1 shows the description by each index Figure 4. Downloaded Data Index Description 0 Decryption keys 1 URL to the encrypted MSIL download 2 Encrypted MSIL DLL injector 3 DLL class 4 Class method name 5 Target application path in reverse string Table 1. Data description by index Next, the encrypted data found in index 2 will be decrypted. The decryption is just a simple XOR using the decryption keys from index 0, and decoded with Base64. Figure 5. Decryption Function for Encrypted MSIL Application The decrypted data turns out to be an MSIL assembly named patent.dll. This component is just a simple injector, which will be reflectively loaded using the .NET Assembly.Load method. It simply means that this DLL will be loaded directly from memory so methods can be directly invoked without saving the file to disk. Another file will be downloaded from the URL specified in index 2, which is also encrypted and will be decrypted using the same function shown in Figure 5. Again, this one turns out to be another executable MSIL application, this time named ZxuiU.exe. This executable file will be loaded and injected into a target process by calling a method from the MSIL assembly named patent.dll. The values in index 3 and index 4 corresponds to the DLL class and method name respectively. And index 5 is the reverse string source path where it will be injected. Figure 6. Invoke Code Injector Injected MSIL EXE Component ZxuiU.exe Please take note that at this stage, the malware is already running and injected into a legitimate application, in this case CWindowsMicrosoft.NETFrameworkv4.0.30319aspnet_regbrowsers.exe. This malicious module is also a downloader, where strings are obfuscated so it will not easily be analyzed. Although it was just a simple base64 encoded, the authors implemented some tricks like reverse string, character concatenation, string replace, etc., so this base64 encoded string will not be easily spotted at a first glance. This malware will download another component MSIL assembly named BreadPlayer.Common.dll from the URL below. This DLL will also be reflectively loaded in memory so its methods can be invoked. hxxpscdn.discordapp.comattachments960145684319838258960211802254364722BreadPlayer.Common.dll Upon looking at this module, it appears to be a tool known as RunPE which is used for process hollowing. This tool is used by malware to hide and execute its code into a target legitimate process. At first glance, it is not obvious that it is a RunPE tool since all the common APIs used for this trick were hidden. This module implements Dynamic API resolving to make static analysis harder. Figure 8 shows resolving the common APIs used in process hollowing. Figure 7. APIs for Process Hollowing After the RunPE module has been downloaded and reflectively loaded, it will then proceed to downloading the final payload, which is executed as a newly created instance of a legitimate system process where the loader is currently running. This invokes the method from the RunPE module with the parameter of the downloaded final payload. Figure 8. Download RunPE and Final Payload The final payload downloaded is a Formbook malware, a popular information stealertrojan available as a Malware-as-a-Service on the dark web market since 2016. Conclusion Malware authors are always finding ways to improve their malware capabilities and evade detection. The malware analyzed in this post used multi-stage loading in their XLL malware to further evade detection. These evasion methods are that common which means the chances are still high that this malware could execute on the victims machine. Techniques used with this improved XLL malware have pros and cons. One of its advantages is that components and final payload will not be dropped in the disk, which could evade detection by security products. However, one of its disadvantages is that it needs to download multiple components and the final payload from different URLs its execution could possibly fail once a single URL is down. It is no surprise to us to find more upcoming improvements related to this Excel-DNA XLL malware due to its high functioning capabilities. Our team in Cyren will keep monitoring this and other evolving threats to help protect our customers from malware. Indicators of Compromise SHA256URL Cyren Detection 2d9035fccfa410259c75bb54edc9c95c2d736e6bdf87832fc2062dcd89286b39 W64Exclddn.LWSS-3552 0c425d6c6bce93fad4f32c275db574e8b3161a1ae55a9a957d50020b516d3e2c W64Exclddn.OMFP-6694 5f1beab27690a8ea9b9be78c5d34dd852dd3af4f5128feace84d1b2e10d73b59 W64Exclddn.TFNR-0460 d838c7ad537e71dab1b968088db4b08195429a5ba6c22fdacad992caf27082a0 W32Agent.DND.gen!Eldorado 3ef33bf0d2e2ce10b3d32bf82e78195acc2c4fd15cc5cd9a8c1226ea98ac6884 W32Trojan.ZQXR-7580 6c229a6e31cf525bc3d46c0f1d2cf52e6a1a2ced7b4cec7b8ba0fb1672dc38e8 W32Injector.QCUW-2488 2796fac226083d8b53551fc5cd97f1ab08a2a9b9c6989a594186b05f624e1e32 W32Trojan.SOAJ-7035 232a16efaec47e6d4fc8f5318ed9d9d58198daef519f30a5d9147d38f293638c W32Formbook.A.gen!Eldorado hxxpstransfer.shget52J99Oku7AxHxl-s.rtf hxxpstransfer.shgetKcWg0bJPqlepxl-s.rtf hxxpstransfer.shgetTWyTFSaj2xJUxl-s.rtf hxxpstransfer.shget0Bny60ku7AxHxl-r.txt hxxpstransfer.shgetTllEFRJPqlepxl-r.txt hxxpstransfer.shgetMqAftfaj2xJUxl-r.txt hxxpscdn.discordapp.comattachments960145684319838258960211802254364722BreadPlayer.Common.dll hxxp179.43.175.179nhtgbinleg2.exe Try it for Free Instant Data Classification Cyren URL Category Chacker Prev What Are Office 365 Safe Attachments? The Resurgence of Emotet Next Company Partners Resources Investor Relations Products Freeware Demo Solutions Contact Us Privacy Management Service by Data443\n            \n            Your analysis should cover:\n            1. Key security features and capabilities\n            2. User benefits and protection measures\n            3. Integration with existing security systems\n            4. Compliance and certification details\n            5. Security best practices for users\n            6. Technical specifications and requirements\n            "
      }
    ],
    "model": "deepseek/deepseek-r1-distill-llama-70b"
  },
  "response": {
    "content": "### Detailed Analysis of Product Security Features\n\nThis analysis reviews the security features and capabilities of a malicious Excel Add-in (XLL) file that uses the Excel-DNA framework to deliver malware. The analysis focuses on key security aspects, user benefits, integration capabilities, compliance, best practices, and technical specifications.\n\n---\n\n### 1. **Key Security Features and Capabilities**\n\nThe malicious XLL file analyzed employs several advanced techniques to evade detection and execute its payload:\n\n- **In-Memory Execution**: The malware avoids writing files to disk by loading and executing its payload directly in memory. This includes using reflective DLL injection to load a malicious MSIL (Microsoft Intermediate Language) assembly without dropping any files.\n  \n- **Multi-Stage Loading**: The malware uses a multi-stage approach to download and decrypt components. This includes:\n  - Downloading an obfuscated URL to retrieve plaintext configuration data.\n  - Decrypting and executing a malicious MSIL assembly (patent.dll) as an injector.\n  - Loading another malicious component (ZxuiU.exe) into a legitimate process for execution.\n  - Using a RunPE tool for process hollowing to hide its malicious activity.\n\n- **Obfuscation and Anti-Analysis Techniques**: The malware employs string obfuscation, URL encryption, and dynamic API resolution to make analysis difficult. For example:\n  - URLs are obfuscated by subtracting each character by a fixed integer value (e.g., 2).\n  - Encrypted data is decrypted using a simple XOR operation with a key and decoded with Base64.\n  - APIs are resolved dynamically to avoid static detection.\n\n- **Endpoint Evasion**: By leveraging Excel's built-in features (e.g., ribbon customization and AutoOpen functions), the malware blends into legitimate Excel functionality, making it harder to detect.\n\n---\n\n### 2. **User Benefits and Protection Measures**\n\n- **Advanced Threat Protection**: Endpoint security solutions that monitor in-memory activities, fileless malware, and unusual process behavior can detect and block this type of threat.\n  \n- **Containment of Malicious Activity**: Security products that prevent unauthorized process hollowing, code injection, and suspicious network communication can mitigate the impact of this malware.\n\n- **Real-Time Monitoring**: Behavior-based detection mechanisms can identify the multi-stage payload execution and block malicious actions before they cause harm.\n\n- **User Education**: Educating users about the risks of opening untrusted Excel files and attachments can prevent initial infection.\n\n---\n\n### 3. **Integration with Existing Security Systems**\n\nThe detection and mitigation of this type of XLL malware require integration with the following security systems:\n\n- **Endpoint Detection and Response (EDR)**: EDR solutions can monitor for malicious in-memory activities, process hollowing, and suspicious API calls.\n  \n- **Network Traffic Analysis**: Monitoring network traffic for malicious URL requests and encrypted payloads can help detect the malware's communication with command-and-control (C2) servers.\n\n- **Antivirus and Anti-Malware Solutions**: Traditional antivirus products can detect known variants of the malware using signatures, while advanced solutions can use heuristic analysis to identify unknown variants.\n\n- **SIEM and Threat Intelligence**: Integrating with Security Information and Event Management (SIEM) systems and threat intelligence feeds can help organizations stay informed about XLL malware campaigns and update their defenses accordingly.\n\n---\n\n### 4. **Compliance and Certification Details**\n\nTo ensure effective protection against such threats, the following compliance and certification considerations are essential:\n\n- **Data Protection Regulations**: Organizations must comply with regulations like GDPR, CCPA, or HIPAA to ensure proper handling of sensitive data that could be targeted by information-stealing malware like Formbook.\n  \n- **Industry Standards**: Compliance with standards such as NIST, ISO 27001, and PCI DSS can help organizations implement robust security controls to prevent and detect malware.\n\n- **Product Certification**: Security solutions used to protect against XLL malware should be certified by independent testing organizations, such as AV-Test or NSS Labs, to ensure their effectiveness.\n\n- **Regular Audits and Testing**: Organizations should conduct regular security audits and penetration testing to identify vulnerabilities that could be exploited by similar malware.\n\n---\n\n### 5. **Security Best Practices for Users**\n\nTo minimize the risk of falling victim to XLL malware, users and organizations should follow these best practices:\n\n- **Avoid Untrusted Files**: Do not open Excel files or install add-ins from untrusted sources.\n  \n- **Use Antivirus Software**: Ensure endpoint security software is installed, updated, and configured to detect in-memory threats and fileless malware.\n\n- **Enable Macro Blocking**: Disable macros in Microsoft Excel by default and only enable them for trusted files.\n\n- **Monitor Network Traffic**: Use firewalls and intrusion detection systems to monitor for suspicious network activity related to encrypted payloads and C2 communication.\n\n- **Regular Updates**: Keep all software, including Microsoft Excel and security solutions, up to date with the latest patches.\n\n- **User Training**: Educate users about the risks of phishing and how to identify suspicious files or emails.\n\n---\n\n### 6. **Technical Specifications and Requirements**\n\nTo effectively detect and mitigate XLL malware, the following technical specifications and requirements are recommended:\n\n- **Supported Platforms**: Ensure endpoint security solutions support Windows environments, as XLL malware primarily targets Windows systems.\n  \n- **Memory Protection**: Use solutions that provide memory protection, such as anti-exploitation and anti-injection technologies.\n\n- **Network Monitoring**: Deploy network monitoring tools that can inspect encrypted traffic (e.g., HTTPS) for malicious payloads.\n\n- **Performance Requirements**: Security solutions should have minimal performance impact to ensure they do not disrupt legitimate user activity.\n\n- **Integration Capabilities**: Solutions should integrate with existing security ecosystems, such as SIEM, EDR, and firewalls, for comprehensive threat detection and response.\n\n- **Threat Intelligence Feeds**: Keep threat intelligence feeds updated to stay informed about new XLL malware variants and Indicators of Compromise (IoCs).\n\n---\n\n### Conclusion\n\nThe analyzed XLL malware demonstrates the evolving nature of cyber threats, leveraging advanced evasion techniques to bypass traditional security measures. Organizations must adopt a multi-layered security approach, including endpoint protection, network monitoring, user education, and regular updates, to effectively mitigate such threats. By understanding the key security features and capabilities of this malware, organizations can improve their defenses and reduce the risk of infection.",
    "usage": {
      "prompt_tokens": 2385,
      "completion_tokens": 1621,
      "total_tokens": 4006
    },
    "model": "deepseek/deepseek-r1-distill-llama-70b"
  }
}